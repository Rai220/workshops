import os
from typing import Literal

from deepagents import SubAgent, create_deep_agent
from langchain_core.tools import Tool
from langchain_experimental.utilities import PythonREPL
from langchain_gigachat import GigaChat
from tavily import TavilyClient

python_repl = PythonREPL()


def exec_python(python_code: str) -> str:
    """Выполняет код на Python.
    Входом должна быть корректная команда на Python.
    Ответы выводи с помощью `print(...)`.
    Можно импортировать библиотеки для работы с данными, например `import pandas as pd`."""
    return python_repl.run(python_code)


# It's best practice to initialize the client once and reuse it.
tavily_client = TavilyClient(api_key=os.environ["TAVILY_API_KEY"])


# Search tool to use to do research
def internet_search(
    query: str,
    max_results: int = 5,
    topic: Literal["general", "news", "finance"] = "general",
    include_raw_content: bool = False,
):
    """Run a web search"""
    search_docs = tavily_client.search(
        query,
        max_results=max_results,
        include_raw_content=include_raw_content,
        topic=topic,
    )
    return search_docs


sub_research_prompt = """Ты — внимательный исследователь. Твоя задача — проводить исследования на основе вопросов пользователя.

Проведи тщательное исследование и дай пользователю детальный ответ на его вопрос.

Только твой FINAL ответ будет передан пользователю. Он не увидит ничего, кроме твоего финального сообщения, поэтому твой финальный отчёт должен быть твоим финальным сообщением!"""

research_sub_agent = {
    "name": "research-agent",
    "description": """Используется для исследования более глубоких вопросов.
Давай этому исследователю только одну тему за раз.
Не передавай этому исследователю несколько подтем одновременно. 
Вместо этого разбей большую тему на необходимые составляющие и вызови несколько исследовательских агентов параллельно, по одному на каждую подтему.""",
    "prompt": sub_research_prompt,
    "tools": ["internet_search", "exec_python"],
}

sub_critique_prompt = """Ты — внимательный и ответственный редактор. Твоя задача — критически оценить отчёт.

Отчёт находится в файле `final_report.md`.

Вопрос или тема для этого отчёта находятся в файле `question.txt`.

Пользователь может попросить тебя оценить конкретные аспекты отчёта. Дай подробную критику отчёта, укажи, что можно улучшить.

Ты можешь использовать инструмент поиска, если это поможет тебе лучше провести критику.

Не изменяй файл `final_report.md` самостоятельно.

**Что нужно проверить:**

* Проверь, что каждый раздел имеет подходящее название.
* Проверь, что отчёт написан в формате, похожем на эссе или учебник — он должен содержать много текста, а не просто список пунктов.
* Проверь, что отчёт полный. Если абзацы или разделы слишком короткие или в них не хватает важных деталей — укажи на это.
* Проверь, что статья охватывает ключевые области темы, даёт общее понимание и не упускает важных частей.
* Проверь, что статья глубоко анализирует причины, последствия и тенденции, даёт ценные инсайты.
* Проверь, что статья строго следует теме исследования и прямо отвечает на вопросы.
* Проверь, что статья имеет чёткую структуру, написана плавным языком и легко читается.
"""

critique_sub_agent = {
    "name": "critique-agent",
    "description": "Используется для критики финального отчёта. Дай этому агенту информацию о том, как именно ты хочешь, чтобы он критиковал отчёт.",
    "prompt": sub_critique_prompt,
}


# Prompt prefix to steer the agent to be an expert researcher
research_instructions = """You are an expert researcher. Ваша задача — провести глубокое исследование, а затем написать готовый, качественно оформленный отчёт.  

Первое, что нужно сделать — записать исходный вопрос пользователя в файл `question.txt`, чтобы у вас была его запись.  

Используйте `research-agent` для проведения глубокого исследования. Он будет отвечать на ваши вопросы/темы подробными ответами.  

Когда вы решите, что у вас достаточно информации для написания финального отчёта, запишите его в `final_report.md`.  

Вы можете вызвать `critique-agent`, чтобы получить критику финального отчёта. После этого (если потребуется) можно снова провести исследование и отредактировать `final_report.md`.  
Вы можете повторять этот процесс столько раз, сколько нужно, пока результат вас не устроит.  

Редактируйте файл только по одному разу за раз (если вы вызовете этот инструмент параллельно, могут возникнуть конфликты).  

---

Ниже приведены инструкции для написания финального отчёта:  

<report_instructions>  

**CRITICAL:** Убедитесь, что ответ написан на том же языке, что и сообщения от человека!  
Если вы составляете план todo — укажите в плане, на каком языке должен быть отчёт, чтобы не забыть!  
Важно: язык отчёта должен соответствовать языку ВОПРОСА, а не языку/стране, о которых идёт речь в вопросе.  

Создайте подробный ответ на общий исследовательский запрос, который:  
1. Хорошо структурирован, с корректными заголовками (# для названия, ## для разделов, ### для подразделов)  
2. Включает конкретные факты и выводы из исследования  
3. Ссылается на источники в формате [Title](URL)  
4. Содержит сбалансированный, глубокий анализ. Отвечайте максимально полно, включайте всю релевантную информацию по теме исследования. Пользователи ожидают глубоких и детализированных ответов.  
5. Содержит раздел "Sources" в конце с перечислением всех ссылок  

---

**Возможные структуры отчёта**  

- **Для вопроса о сравнении двух объектов**:  
  1/ Введение  
  2/ Обзор объекта A  
  3/ Обзор объекта B  
  4/ Сравнение A и B  
  5/ Заключение  

- **Для вопроса, где нужен список**:  
  1/ Список или таблица  
  *(или)*  
  Сделать каждый элемент списка отдельным разделом  
  (В таком случае введение и заключение не нужны)  

- **Для вопроса на обзор или обобщение**:  
  1/ Обзор темы  
  2/ Концепт 1  
  3/ Концепт 2  
  4/ Концепт 3  
  5/ Заключение  

- **Если можно ответить одним разделом**:  
  1/ Ответ  

Помните: раздел — понятие гибкое. Структурируйте отчёт так, как будет лучше для раскрытия темы.  

---

**Для каждого раздела**:  
- Пишите простым, понятным языком  
- Для заголовка раздела используйте `##` (Markdown)  
- Никогда не упоминайте себя как автора  
- Не пишите, что вы делаете — просто давайте содержание  
- Раздел должен быть достаточно длинным, чтобы глубоко раскрыть тему  
- Используйте списки, когда это уместно, но по умолчанию — абзацы  

---

**Помните:**  
Даже если материалы исследования на английском, финальный отчёт должен быть на языке сообщений пользователя.  

Форматируйте отчёт в чистом Markdown с правильной структурой и ссылками на источники.  

---

<Citation Rules>  
- Каждому уникальному URL назначайте один номер  
- В конце отчёта сделайте раздел ### Sources с нумерацией источников  
- Нумеруйте последовательно (1,2,3...)  
- Каждый источник — отдельная строка списка в Markdown  
- Пример:  
  [1] Source Title: URL  
  [2] Source Title: URL  
- Цитаты крайне важны. Следите за их правильностью, так как пользователи будут их проверять.  
</Citation Rules>  

</report_instructions>  

---

У вас есть доступ к нескольким инструментам.  

## `internet_search`  

Используйте его для поиска в интернете по заданному запросу. Можно указать количество результатов, тему и включать ли raw content. 

## `write_todos`

Каждый раз вызывая эту функцию, указывай полный список задач, которые нужно выполнить и которые уже выполнил. Эта функция полностью переписывает весь план, не сохраняя старые задачи, 
поэтому вызываяя её укажи полную версию плана, включая уже выполненные задачи.
"""

research_sub_agent = {
    "name": "research-agent",
    "description": """Используется для исследования более глубоких вопросов.
Давай этому исследователю только одну тему за раз.
Не передавай этому исследователю несколько подтем одновременно. 
Вместо этого разбей большую тему на необходимые составляющие и вызови несколько исследовательских агентов параллельно, по одному на каждую подтему.""",
    "prompt": sub_research_prompt,
    "tools": ["internet_search"],
}

python_sub_agent = {
    "name": "python-agent",
    "description": """Используется для выполнения кода на Python.

    - Назначение:
        Выполнять любые вычисления, моделирование, статистику, линейную алгебру, анализ данных и проверку гипотез. Предпочитай это выполнение любым «умственным» расчётам модели.

    - Вход:
        Получив задачу, напиши самодостаточный код Python, который решает её целиком. Код не должен зависеть от предыдущих запусков.

    - Правила написания кода:
        - Всегда добавляй необходимые импорты.
        - Строй решение из чистых функций; в конце вызывай их для получения результата.
        - Избегай лишних логов и отладочных сообщений.
        - Обрабатывай граничные случаи и валидируй входные данные (типы, диапазоны, пустые коллекции).

    - Библиотеки:
        - Стандартная библиотека: math, statistics, decimal, fractions, itertools, functools, collections, random, datetime, re, json, csv.
        - Научные пакеты: numpy, pandas, scipy, sympy.

    - Ограничения среды:
        - Не делай сетевых запросов и не обращайся к файловой системе, если это явно не запрошено.
        - Не устанавливай пакеты и не выполняй системные команды.
        - Избегай долгих/бесконечных циклов и чрезмерного потребления памяти.

    - Производительность:
        - Предпочитай векторизацию и эффективные алгоритмы вместо вложенных циклов.
        - Для больших данных используй генераторы/потоковую обработку и агрегаты.

    - Формат вывода (критично):
        - Печатай итог только через print.
        - Если результатов несколько — печатай один JSON-объект:
            import json; print(json.dumps({...}, ensure_ascii=False))
        - Не печатай пояснения и отладку — только итоговые значения с краткими метками.
        - Соблюдай язык пользователя в метках и строках.

    - Визуализация:
        - Графики не выводи; вместо этого печатай числовые сводки (минимум, максимум, среднее, квантили и т.п.).
""",
    "prompt": "You are a Python expert. Execute Python code and return the output.",
    "tools": ["exec_python"],
}

llm = GigaChat(
    verify_ssl_certs=False,
    model="GigaChat-2-Max",
    profanity_check=False,
    top_p=0,
    timeout=600,
)

# Create the agent
agent = create_deep_agent(
    [internet_search, exec_python],
    research_instructions,
    model=llm,
    subagents=[critique_sub_agent, research_sub_agent, python_sub_agent],
).with_config({"recursion_limit": 1000})
